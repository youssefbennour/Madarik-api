// <auto-generated />
using System;
using Madarik.Madarik.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Madarik.Madarik.Data.Database.Migrations
{
    [DbContext(typeof(SalamHackPersistence))]
    [Migration("20250315010554_ChangeIdToGuid")]
    partial class ChangeIdToGuid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SalamHack")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Madarik.Madarik.Data.Roadmap.Roadmap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roadmap", "SalamHack");
                });

            modelBuilder.Entity("Madarik.Madarik.Data.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "SalamHack");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "SalamHack");
                });

            modelBuilder.Entity("Madarik.Madarik.Data.Roadmap.Roadmap", b =>
                {
                    b.OwnsOne("Madarik.Madarik.Data.Roadmap.FlowChart", "FlowChart", b1 =>
                        {
                            b1.Property<Guid>("RoadmapId")
                                .HasColumnType("uuid");

                            b1.HasKey("RoadmapId");

                            b1.ToTable("Roadmap", "SalamHack");

                            b1.ToJson("FlowChart");

                            b1.WithOwner()
                                .HasForeignKey("RoadmapId");

                            b1.OwnsMany("Madarik.Madarik.Data.Roadmap.FlowChartEdge", "Edges", b2 =>
                                {
                                    b2.Property<Guid>("FlowChartRoadmapId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<bool>("Animated")
                                        .HasColumnType("boolean")
                                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                                    b2.Property<string>("Id")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "id");

                                    b2.Property<Guid>("Source")
                                        .HasColumnType("uuid")
                                        .HasAnnotation("Relational:JsonPropertyName", "source");

                                    b2.Property<Guid>("Target")
                                        .HasColumnType("uuid")
                                        .HasAnnotation("Relational:JsonPropertyName", "target");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "type");

                                    b2.HasKey("FlowChartRoadmapId", "__synthesizedOrdinal");

                                    b2.ToTable("Roadmap", "SalamHack");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "edges");

                                    b2.WithOwner()
                                        .HasForeignKey("FlowChartRoadmapId");

                                    b2.OwnsOne("Madarik.Madarik.Data.Roadmap.EdgeStyle", "Style", b3 =>
                                        {
                                            b3.Property<Guid>("FlowChartEdgeFlowChartRoadmapId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("FlowChartEdge__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Stroke")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "stroke");

                                            b3.HasKey("FlowChartEdgeFlowChartRoadmapId", "FlowChartEdge__synthesizedOrdinal");

                                            b3.ToTable("Roadmap", "SalamHack");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "style");

                                            b3.WithOwner()
                                                .HasForeignKey("FlowChartEdgeFlowChartRoadmapId", "FlowChartEdge__synthesizedOrdinal");
                                        });

                                    b2.Navigation("Style");
                                });

                            b1.OwnsMany("Madarik.Madarik.Data.Roadmap.FlowChartNode", "Nodes", b2 =>
                                {
                                    b2.Property<Guid>("FlowChartRoadmapId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid")
                                        .HasAnnotation("Relational:JsonPropertyName", "id");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "type");

                                    b2.HasKey("FlowChartRoadmapId", "__synthesizedOrdinal");

                                    b2.ToTable("Roadmap", "SalamHack");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "nodes");

                                    b2.WithOwner()
                                        .HasForeignKey("FlowChartRoadmapId");

                                    b2.OwnsOne("Madarik.Madarik.Data.Roadmap.NodeData", "Data", b3 =>
                                        {
                                            b3.Property<Guid>("FlowChartNodeFlowChartRoadmapId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("FlowChartNode__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Label")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "label");

                                            b3.HasKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");

                                            b3.ToTable("Roadmap", "SalamHack");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "data");

                                            b3.WithOwner()
                                                .HasForeignKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");
                                        });

                                    b2.OwnsOne("Madarik.Madarik.Data.Roadmap.NodeStyle", "Style", b3 =>
                                        {
                                            b3.Property<Guid>("FlowChartNodeFlowChartRoadmapId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("FlowChartNode__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<string>("BackgroundColor")
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "backgroundColor");

                                            b3.Property<string>("Border")
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "border");

                                            b3.Property<string>("Color")
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "color");

                                            b3.HasKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");

                                            b3.ToTable("Roadmap", "SalamHack");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "style");

                                            b3.WithOwner()
                                                .HasForeignKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");
                                        });

                                    b2.OwnsOne("Madarik.Madarik.Data.Roadmap.Position", "Position", b3 =>
                                        {
                                            b3.Property<Guid>("FlowChartNodeFlowChartRoadmapId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("FlowChartNode__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<int>("X")
                                                .HasColumnType("integer")
                                                .HasAnnotation("Relational:JsonPropertyName", "x");

                                            b3.Property<int>("Y")
                                                .HasColumnType("integer")
                                                .HasAnnotation("Relational:JsonPropertyName", "y");

                                            b3.HasKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");

                                            b3.ToTable("Roadmap", "SalamHack");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "position");

                                            b3.WithOwner()
                                                .HasForeignKey("FlowChartNodeFlowChartRoadmapId", "FlowChartNode__synthesizedOrdinal");
                                        });

                                    b2.Navigation("Data")
                                        .IsRequired();

                                    b2.Navigation("Position")
                                        .IsRequired();

                                    b2.Navigation("Style");
                                });

                            b1.Navigation("Edges");

                            b1.Navigation("Nodes");
                        });

                    b.Navigation("FlowChart")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Madarik.Madarik.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Madarik.Madarik.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Madarik.Madarik.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Madarik.Madarik.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
